/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * @fastify/swagger
 * OpenAPI spec version: 9.4.2
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { GetItems201, PostItemsBody } from ".././model";

/**
 * Get items
 * @summary qwerty
 */
export const getItems = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetItems201>> => {
  return axios.get(`/items`, options);
};

export const getGetItemsQueryKey = () => {
  return [`/items`] as const;
};

export const getGetItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getItems>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetItemsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getItems>>> = ({
    signal,
  }) => getItems({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getItems>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getItems>>
>;
export type GetItemsQueryError = AxiosError<unknown>;

/**
 * @summary qwerty
 */

export function useGetItems<
  TData = Awaited<ReturnType<typeof getItems>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getItems>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetItemsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Add item
 * @summary qwerty
 */
export const postItems = (
  postItemsBody: PostItemsBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/items`, postItemsBody, options);
};

export const getPostItemsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postItems>>,
    TError,
    { data: PostItemsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postItems>>,
  TError,
  { data: PostItemsBody },
  TContext
> => {
  const mutationKey = ["postItems"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postItems>>,
    { data: PostItemsBody }
  > = (props) => {
    const { data } = props ?? {};

    return postItems(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostItemsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postItems>>
>;
export type PostItemsMutationBody = PostItemsBody;
export type PostItemsMutationError = AxiosError<unknown>;

/**
 * @summary qwerty
 */
export const usePostItems = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postItems>>,
    TError,
    { data: PostItemsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postItems>>,
  TError,
  { data: PostItemsBody },
  TContext
> => {
  const mutationOptions = getPostItemsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete item
 * @summary qwerty
 */
export const deleteItemsItemId = (
  itemId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/items/${itemId}`, options);
};

export const getDeleteItemsItemIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteItemsItemId>>,
    TError,
    { itemId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteItemsItemId>>,
  TError,
  { itemId: string },
  TContext
> => {
  const mutationKey = ["deleteItemsItemId"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteItemsItemId>>,
    { itemId: string }
  > = (props) => {
    const { itemId } = props ?? {};

    return deleteItemsItemId(itemId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteItemsItemIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteItemsItemId>>
>;

export type DeleteItemsItemIdMutationError = AxiosError<unknown>;

/**
 * @summary qwerty
 */
export const useDeleteItemsItemId = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteItemsItemId>>,
    TError,
    { itemId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteItemsItemId>>,
  TError,
  { itemId: string },
  TContext
> => {
  const mutationOptions = getDeleteItemsItemIdMutationOptions(options);

  return useMutation(mutationOptions);
};
